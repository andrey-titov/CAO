// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#pragma multi_compile __ FULL_RECALCULATION
#pragma multi_compile NEIGHBORS_6 NEIGHBORS_14 NEIGHBORS_26 RUBIKS_54 SPHERE_512

#define NORM_COMPONENT 0.57735026919

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture3D<float> Opacities;

#if !FULL_RECALCULATION 
Texture3D<float> LaoPrecalculated;
Texture3D<float> Mask;
#endif

SamplerState samplerOpacities;
RWTexture3D<float> Result;
float4 Dimensions;
float4 PhysicalSize;
float4 StepForMm;
int RayStepCount;
float DistanceToVoxel;

#if NEIGHBORS_6
#define LAO_RAYS_COUNT 6
static const float3 SphereVectors[6] = {
	float3(-0.01254252, -0.01942556, -0.9997327),
	float3(0.01368665, -0.9999006, -0.003387214),
	float3(-0.9995617, 0.02202271, -0.0197836),
	float3(0.9996481, -0.02339324, -0.01250504),
	float3(-0.008778812, 0.9999219, 0.008887799),
	float3(0.00769931, -0.01080029, 0.9999121),
};
#elif NEIGHBORS_14
#define LAO_RAYS_COUNT 14
static const float3 SphereVectors[14] = {
	float3(-0.579713, -0.5797849, -0.5725228),
	float3(0.5650677, -0.5865736, -0.5801982),
	float3(0.01511563, -0.01676875, -0.9997451),
	float3(-0.5815925, 0.5853441, -0.5649092),
	float3(0.5782437, 0.5828691, -0.5708746),
	float3(-0.02492165, -0.9995662, 0.01569442),
	float3(-0.9997517, -0.02226884, 0.0007326504),
	float3(0.9996319, -0.01134024, 0.0246496),
	float3(0.009609205, 0.9999484, -0.003301854),
	float3(-0.5759299, -0.5758724, 0.5802376),
	float3(0.5707417, -0.5823619, 0.5788856),
	float3(-0.01636905, -0.00759655, 0.9998372),
	float3(-0.5782773, 0.5653461, 0.5882),
	float3(0.5648382, 0.5904661, 0.5764612),
};
#elif NEIGHBORS_26
#define LAO_RAYS_COUNT 26
static const float3 SphereVectors[26] = {
	float3(-0.5667403, -0.5836374, -0.5815263),
	float3(-0.009933316, -0.7109922, -0.7031296),
	float3(0.5811687, -0.5853653, -0.5653232),
	float3(-0.6953574, 0.01049349, -0.7185876),
	float3(-0.01987529, -0.01598833, -0.9996746),
	float3(0.7198348, -0.003438571, -0.6941369),
	float3(-0.5721921, 0.5742458, -0.5855237),
	float3(-0.00639631, 0.6986901, -0.7153959),
	float3(0.5744827, 0.5752538, -0.5822823),
	float3(-0.7176735, -0.6962799, 0.01178808),
	float3(0.01806367, -0.9996197, -0.02083497),
	float3(0.7054915, -0.7086492, -0.009900784),
	float3(-0.9999476, -0.001207072, -0.01016594),
	float3(0.9997975, -0.01902171, -0.006578589),
	float3(-0.7098706, 0.7043292, 0.002032651),
	float3(-0.009910622, 0.9998067, -0.0169835),
	float3(0.7039288, 0.7102134, 0.009011471),
	float3(-0.5767372, -0.5778195, 0.5774937),
	float3(0.01724481, -0.7017277, 0.7122365),
	float3(0.5817109, -0.5671079, 0.5830962),
	float3(-0.6958146, 0.00146335, 0.71822),
	float3(-0.01734166, -0.02460888, 0.9995468),
	float3(0.7041248, -0.01525757, 0.7099122),
	float3(-0.5828518, 0.562349, 0.5865555),
	float3(-0.0009066496, 0.7041441, 0.7100565),
	float3(0.5648298, 0.5856922, 0.5813192),
};
#elif RUBIKS_54
#define LAO_RAYS_COUNT 54
static const float3 SphereVectors[54] = {
	float3(-0.4763575, -0.4972236, 0.7251566),
	float3(-0.4891881, -0.4761175, -0.7307579),
	float3(-0.4919567, 0.727244, -0.4786386),
	float3(-0.486277, -0.7312449, -0.4783468),
	float3(0.7232767, -0.4931386, -0.4834099),
	float3(-0.7244288, -0.492324, -0.4825144),
	float3(-0.5530991, -0.005199978, 0.8330992),
	float3(-0.5603836, -0.009132039, -0.8281829),
	float3(-0.5531075, 0.8331, -0.004054456),
	float3(-0.5509538, -0.8345191, -0.005259553),
	float3(0.8397767, -0.5429314, -0.000770062),
	float3(-0.8368352, -0.5473917, 0.008321018),
	float3(-0.4833943, 0.4862795, 0.7279164),
	float3(-0.4859104, 0.4758576, -0.7331102),
	float3(-0.486359, 0.7349272, 0.4725853),
	float3(-0.4827307, -0.7210611, 0.4970332),
	float3(0.7272946, -0.4789542, 0.4915745),
	float3(-0.7278258, -0.4852628, 0.484551),
	float3(-0.004262592, -0.5522165, 0.8336899),
	float3(-0.004874218, -0.5603684, -0.8282291),
	float3(0.00908043, 0.8361031, -0.5484971),
	float3(-0.004839533, -0.8286467, -0.5597511),
	float3(0.8282616, 0.01264081, -0.560199),
	float3(-0.8284941, -0.007807786, -0.5599434),
	float3(0.009727393, -0.01095701, 0.9998927),
	float3(-0.01618185, -0.01162082, -0.9998015),
	float3(0.01516127, 0.9997934, -0.01353692),
	float3(-0.0001736285, -0.9999397, 0.01097668),
	float3(0.9999961, -0.001825983, -0.002107258),
	float3(-0.9998755, 0.01506785, -0.004675318),
	float3(0.01177535, 0.5471882, 0.8369268),
	float3(-0.01083443, 0.5623513, -0.8268274),
	float3(-0.003943227, 0.8281039, 0.5605608),
	float3(0.01089193, -0.8372002, 0.5467881),
	float3(0.8290521, -0.0004741607, 0.5591711),
	float3(-0.8375387, 0.00334622, 0.5463679),
	float3(0.4826408, -0.4916613, 0.7247944),
	float3(0.4834355, -0.4840741, -0.7293575),
	float3(0.4894944, 0.7268932, -0.481686),
	float3(0.4823729, -0.7326018, -0.4802198),
	float3(0.7287435, 0.4740115, -0.4942127),
	float3(-0.7256566, 0.487299, -0.4857594),
	float3(0.5457153, 0.004978947, 0.8379558),
	float3(0.5478086, 0.004172083, -0.8365933),
	float3(0.5655177, 0.8247359, 0.0006064051),
	float3(0.5418192, -0.8403987, -0.01272717),
	float3(0.8296847, 0.5581588, 0.009054532),
	float3(-0.8329937, 0.553274, 0.003067825),
	float3(0.4776806, 0.4822807, 0.7343204),
	float3(0.4787627, 0.4858072, -0.7312849),
	float3(0.4803861, 0.728627, 0.4881923),
	float3(0.4837652, -0.7309541, 0.4813288),
	float3(0.7232316, 0.4843388, 0.4922927),
	float3(-0.7266845, 0.4763535, 0.4949919),
};
#else
#define LAO_RAYS_COUNT 512
static const float3 SphereVectors[512] = {
	float3(0.02263737, -0.05822358, 0.9980469),
	float3(-0.09693731, 0.0478286, 0.9941406),
	float3(0.1338563, 0.03896648, 0.9902344),
	float3(-0.08555686, -0.1408434, 0.9863281),
	float3(-0.03630728, 0.1831094, 0.9824219),
	float3(0.166176, -0.1220357, 0.9785156),
	float3(-0.2226024, -0.02418093, 0.9746094),
	float3(0.1586126, 0.1804923, 0.9707031),
	float3(0.005281477, -0.2554915, 0.9667969),
	float3(-0.1863829, 0.1952, 0.9628906),
	float3(0.2828255, -0.01893973, 0.9589844),
	float3(-0.2314101, -0.1851355, 0.9550781),
	float3(0.04747101, 0.3049895, 0.9511719),
	float3(0.1775461, -0.2667681, 0.9472656),
	float3(-0.32211, 0.07948719, 0.9433594),
	float3(0.3007799, 0.1641928, 0.9394531),
	float3(-0.1142789, -0.3342041, 0.9355469),
	float3(-0.1455649, 0.3329514, 0.9316406),
	float3(0.341254, -0.1511775, 0.9277344),
	float3(-0.3628152, -0.1220931, 0.9238281),
	float3(0.1895472, 0.3432427, 0.9199219),
	float3(0.09421629, -0.3899214, 0.9160156),
	float3(-0.3401636, 0.2287908, 0.9121094),
	float3(0.4138587, 0.06235468, 0.9082031),
	float3(-0.2683083, -0.332051, 0.9042969),
	float3(-0.02696403, 0.4342461, 0.9003906),
	float3(0.318967, -0.3075318, 0.8964844),
	float3(-0.4507457, 0.01151625, 0.8925781),
	float3(0.3459151, 0.3010066, 0.8886719),
	float3(-0.05258312, -0.4630603, 0.8847656),
	float3(-0.2783383, 0.3829028, 0.8808594),
	float3(0.4709391, -0.09575773, 0.8769531),
	float3(-0.4179901, -0.2511443, 0.8730469),
	float3(0.1405483, 0.4741737, 0.8691406),
	float3(0.2196462, -0.4506939, 0.8652344),
	float3(-0.4726161, 0.1864079, 0.8613281),
	float3(0.4805386, 0.1841477, 0.8574219),
	float3(-0.2328253, -0.4661582, 0.8535156),
	float3(-0.1449536, 0.507102, 0.8496094),
	float3(0.4547465, -0.2792704, 0.8457031),
	float3(-0.5299921, -0.1024031, 0.8417969),
	float3(0.3252262, 0.4383688, 0.8378906),
	float3(0.05691858, -0.5488445, 0.8339844),
	float3(-0.4170932, 0.3701399, 0.8300781),
	float3(0.5633478, 0.008906848, 0.8261719),
	float3(-0.4135079, -0.3910121, 0.8222656),
	float3(0.04118167, 0.5732295, 0.8183594),
	float3(0.3602622, -0.4548375, 0.8144531),
	float3(-0.5782605, 0.09289007, 0.8105469),
	float3(0.4936196, 0.3250702, 0.8066406),
	float3(-0.1457063, -0.5782622, 0.8027344),
	float3(-0.28567, 0.5294018, 0.7988281),
	float3(0.5731121, -0.1991025, 0.7949219),
	float3(-0.5617465, -0.2423534, 0.7910156),
	float3(0.2525758, 0.5627293, 0.7871094),
	float3(0.1954542, -0.5902461, 0.7832031),
	float3(-0.5470879, 0.3055998, 0.7792969),
	float3(0.6145364, 0.1453079, 0.7753906),
	float3(-0.3576467, -0.5262136, 0.7714844),
	float3(-0.09239711, 0.6342607, 0.7675781),
	float3(0.5001841, -0.4081926, 0.7636719),
	float3(-0.6491362, -0.0371267, 0.7597656),
	float3(0.4567224, 0.4691282, 0.7558594),
	float3(-0.02003432, -0.6589121, 0.7519531),
	float3(-0.4331945, 0.5027608, 0.7480469),
	float3(0.6633837, -0.07859305, 0.7441406),
	float3(-0.5457688, -0.3926698, 0.7402344),
	float3(0.1380372, 0.6623946, 0.7363281),
	float3(0.3478009, -0.5853142, 0.7324219),
	float3(-0.6558387, 0.1978398, 0.7285157),
	float3(0.6209634, 0.2989075, 0.7246094),
	float3(-0.2575033, -0.6436452, 0.7207031),
	float3(-0.2463508, 0.6523139, 0.7167969),
	float3(0.6258388, -0.316406, 0.7128906),
	float3(-0.6789986, -0.190531, 0.7089844),
	float3(0.374046, 0.602457, 0.7050781),
	float3(0.1318832, -0.7006888, 0.7011719),
	float3(-0.5736014, 0.4298861, 0.6972656),
	float3(0.7171023, 0.07083079, 0.6933594),
	float3(-0.4833993, -0.5394252, 0.6894531),
	float3(-0.007954812, 0.727985, 0.6855469),
	float3(0.5001321, -0.5340729, 0.6816406),
	float3(-0.7331506, 0.05627004, 0.6777344),
	float3(0.5814421, 0.4559394, 0.6738281),
	float3(-0.1213077, -0.7324542, 0.6699219),
	float3(-0.4072153, 0.6249791, 0.6660156),
	float3(0.7258019, -0.1866084, 0.6621094),
	float3(-0.6642743, -0.3542716, 0.6582031),
	float3(0.2516133, 0.7131524, 0.6542969),
	float3(0.2974947, -0.6989198, 0.6503906),
	float3(-0.6944978, 0.3158019, 0.6464844),
	float3(0.7285448, 0.2373096, 0.6425781),
	float3(-0.3785262, -0.6699374, 0.6386719),
	float3(-0.1741765, 0.7528181, 0.6347656),
	float3(0.6395741, -0.4392738, 0.6308594),
	float3(-0.7714523, -0.1085869, 0.6269531),
	float3(0.4975001, 0.6035779, 0.6230469),
	float3(0.04101162, -0.7842085, 0.6191406),
	float3(-0.5621704, 0.5526763, 0.6152344),
	float3(0.7908849, -0.02791266, 0.6113281),
	float3(-0.6042942, -0.5156232, 0.6074219),
	float3(0.09767345, 0.7913462, 0.6035156),
	float3(0.4642151, -0.6518996, 0.5996094),
	float3(-0.785493, 0.1677458, 0.5957031),
	float3(0.6949545, 0.4084296, 0.5917969),
	float3(-0.2374046, -0.7733199, 0.5878907),
	float3(-0.3485093, 0.7331463, 0.5839844),
	float3(0.7547961, -0.3062551, 0.5800781),
	float3(-0.766002, -0.2850735, 0.5761719),
	float3(0.3735282, 0.7300608, 0.5722656),
	float3(0.2184207, -0.7932591, 0.5683594),
	float3(-0.6991582, 0.4388285, 0.5644532),
	float3(0.8145798, 0.149154, 0.5605469),
	float3(-0.5014178, -0.662368, 0.5566406),
	float3(-0.07791562, 0.8297071, 0.5527344),
	float3(0.6198086, -0.5609144, 0.5488281),
	float3(-0.8384715, -0.005067957, 0.5449219),
	float3(0.6167061, 0.5718179, 0.5410156),
	float3(-0.06860488, -0.8407182, 0.5371093),
	float3(-0.5188104, 0.6682292, 0.5332031),
	float3(0.8363478, -0.1427133, 0.5292969),
	float3(-0.7151479, -0.4610079, 0.5253906),
	float3(0.2164507, 0.8253503, 0.5214844),
	float3(0.3990004, -0.7569093, 0.5175781),
	float3(-0.8077009, 0.289414, 0.5136719),
	float3(0.7932235, 0.3330698, 0.5097656),
	float3(-0.3608962, -0.7834923, 0.5058594),
	float3(-0.2639025, 0.8236495, 0.5019531),
	float3(0.7529079, -0.4302081, 0.4980469),
	float3(-0.847954, -0.1918308, 0.4941406),
	float3(0.4969526, 0.7160366, 0.4902344),
	float3(0.1175103, -0.8658385, 0.4863282),
	float3(-0.6732301, 0.5603842, 0.4824218),
	float3(0.8770916, 0.0416297, 0.4785156),
	float3(-0.6201274, -0.6246503, 0.4746093),
	float3(0.03542404, 0.8815802, 0.4707032),
	float3(0.5707812, -0.6755068, 0.4667969),
	float3(-0.8792059, 0.112824, 0.4628906),
	float3(0.726182, 0.5118526, 0.4589843),
	float3(-0.1901634, -0.869909, 0.4550782),
	float3(-0.4483725, 0.7716256, 0.4511718),
	float3(0.8537421, -0.2666047, 0.4472656),
	float3(-0.81138, -0.3809134, 0.4433593),
	float3(0.3417353, 0.8307214, 0.4394531),
	float3(0.3097918, -0.8451793, 0.4355469),
	float3(-0.8009997, 0.4148324, 0.4316406),
	float3(0.8726192, 0.2357519, 0.4277344),
	float3(-0.4851984, -0.7648218, 0.4238282),
	float3(-0.1591555, 0.893496, 0.4199218),
	float3(0.7223177, -0.5524384, 0.4160156),
	float3(-0.9075534, -0.08070191, 0.4121093),
	float3(0.6158084, 0.6739067, 0.4082031),
	float3(0.001118333, -0.9146271, 0.4042968),
	float3(-0.6197904, 0.6749425, 0.4003906),
	float3(0.9146197, -0.07918891, 0.3964843),
	float3(-0.7291792, -0.5605178, 0.3925781),
	float3(0.1593596, 0.9074903, 0.3886718),
	float3(0.4963551, -0.7781947, 0.3847657),
	float3(-0.8932173, 0.2389746, 0.3808594),
	float3(0.8214851, 0.4278651, 0.3769532),
	float3(-0.317175, -0.8719152, 0.3730469),
	float3(-0.3556708, 0.858623, 0.3691406),
	float3(0.8436395, -0.3935432, 0.3652343),
	float3(-0.8893681, -0.2801187, 0.3613281),
	float3(0.4673482, 0.8086008, 0.3574219),
	float3(0.2020028, -0.9133573, 0.3535157),
	float3(-0.7671019, 0.5378922, 0.3496093),
	float3(0.9304172, 0.1217091, 0.3457031),
	float3(-0.604786, -0.7193114, 0.3417969),
	float3(-0.04008826, 0.9403313, 0.3378906),
	float3(0.6657115, -0.6672951, 0.3339843),
	float3(-0.9429988, 0.0424469, 0.3300781),
	float3(0.7250666, 0.6065396, 0.3261719),
	float3(-0.1251308, -0.9383428, 0.3222657),
	float3(-0.5424045, 0.7774604, 0.3183593),
	float3(0.9263854, -0.2071941, 0.3144531),
	float3(-0.8241716, -0.4736051, 0.3105469),
	float3(0.2882098, 0.907142, 0.3066406),
	float3(0.4007521, -0.8647252, 0.3027344),
	float3(-0.8807881, 0.3673066, 0.2988282),
	float3(0.8987283, 0.3245129, 0.2949218),
	float3(-0.4440661, -0.8474168, 0.2910157),
	float3(-0.2452596, 0.9259676, 0.2871093),
	float3(0.807294, -0.5177572, 0.2832031),
	float3(-0.9461256, -0.1638277, 0.2792969),
	float3(0.5876883, 0.7607775, 0.2753907),
	float3(0.08062331, -0.9590601, 0.2714843),
	float3(-0.7080716, 0.6534804, 0.2675781),
	float3(0.9646062, -0.003471409, 0.2636719),
	float3(-0.7144157, -0.6497169, 0.2597656),
	float3(0.08802997, 0.9626976, 0.2558594),
	float3(0.5859836, -0.7701577, 0.2519532),
	float3(-0.9533082, 0.1722677, 0.2480469),
	float3(0.8200939, 0.517534, 0.2441406),
	float3(-0.255403, -0.9365131, 0.2402344),
	float3(-0.4446959, 0.8639413, 0.2363281),
	float3(0.9123637, -0.3370053, 0.2324219),
	float3(-0.9012583, -0.3681224, 0.2285157),
	float3(0.4161998, 0.8810949, 0.2246094),
	float3(0.2885184, -0.9316905, 0.2207031),
	float3(-0.8428359, 0.4925715, 0.2167969),
	float3(0.9550282, 0.2063941, 0.2128906),
	float3(-0.565396, -0.7979053, 0.2089844),
	float3(-0.1222689, 0.9710784, 0.2050781),
	float3(0.7466355, -0.6340863, 0.2011718),
	float3(-0.9796548, -0.03691391, 0.1972656),
	float3(0.6979189, 0.6895806, 0.1933594),
	float3(-0.04900134, -0.9806663, 0.1894531),
	float3(-0.6268471, 0.7567265, 0.1855469),
	float3(0.9741147, -0.1345633, 0.1816406),
	float3(-0.8098477, -0.5590681, 0.1777344),
	float3(0.2195743, 0.9599848, 0.1738281),
	float3(0.4867634, -0.8568477, 0.1699218),
	float3(-0.9383791, 0.3031229, 0.1660156),
	float3(0.8972393, 0.4107095, 0.1621094),
	float3(-0.384547, -0.9094478, 0.1582032),
	float3(-0.3310671, 0.9309066, 0.1542969),
	float3(0.8734006, -0.4631999, 0.1503906),
	float3(-0.957449, -0.2486641, 0.1464844),
	float3(0.5382531, 0.8306354, 0.1425781),
	float3(0.164143, -0.9766408, 0.1386718),
	float3(-0.7812291, 0.6095238, 0.1347657),
	float3(0.9883148, 0.0781643, 0.1308594),
	float3(-0.6762295, -0.7256697, 0.1269531),
	float3(0.00835617, 0.9923657, 0.1230469),
	float3(0.6643818, -0.7378362, 0.1191406),
	float3(-0.9887637, 0.09522281, 0.1152344),
	float3(0.7938496, 0.5978367, 0.1113281),
	float3(-0.1815113, -0.9775041, 0.1074219),
	float3(-0.5267546, 0.8436908, 0.1035157),
	float3(0.9586623, -0.266542, 0.09960933),
	float3(-0.8872324, -0.4512866, 0.09570313),
	float3(0.3496446, 0.9323744, 0.09179688),
	float3(0.3722137, -0.9239763, 0.08789064),
	float3(-0.8989413, 0.4299433, 0.08398436),
	float3(0.9536242, 0.2901522, 0.08007808),
	float3(-0.5072508, -0.8584256, 0.07617189),
	float3(-0.2057432, 0.9759341, 0.0722656),
	float3(0.8112226, -0.5807279, 0.06835938),
	float3(-0.9906929, -0.1198891, 0.06445307),
	float3(0.6497933, 0.7576957, 0.06054685),
	float3(0.0327826, -0.9978563, 0.05664065),
	float3(-0.6984336, 0.7137293, 0.05273442),
	float3(0.9973107, -0.05465474, 0.04882809),
	float3(-0.7723852, -0.6335638, 0.04492185),
	float3(0.1417364, 0.9890544, 0.04101564),
	float3(0.5637504, -0.8251112, 0.03710939),
	float3(-0.9732023, 0.2275408, 0.03320318),
	float3(0.8714894, 0.4895384, 0.02929693),
	float3(-0.3118724, -0.9497847, 0.02539059),
	float3(-0.4115086, 0.9111527, 0.02148435),
	float3(0.9190165, -0.393827, 0.01757813),
	float3(-0.9437062, -0.3305022, 0.01367188),
	float3(0.4727602, 0.881137, 0.009765664),
	float3(0.2467019, -0.9690737, 0.005859417),
	float3(-0.8364421, 0.5480519, 0.00195308),
	float3(0.9869545, 0.1609873, -0.001953167),
	float3(-0.618919, -0.7854331, -0.005859385),
	float3(-0.07403137, 0.9972081, -0.009765633),
	float3(0.7282256, -0.6852011, -0.01367185),
	float3(-0.9997545, 0.01348339, -0.0175781),
	float3(0.7461746, 0.6654035, -0.02148443),
	float3(-0.1006271, -0.9946002, -0.02539068),
	float3(-0.5974613, 0.8013624, -0.0292969),
	float3(0.98176, -0.1872027, -0.03320315),
	float3(-0.8503335, -0.5249342, -0.03710936),
	float3(0.2722871, 0.9613415, -0.04101561),
	float3(0.4486116, -0.8925972, -0.04492182),
	float3(-0.9335092, 0.3552133, -0.04882818),
	float3(0.9280636, 0.3686695, -0.05273439),
	float3(-0.4353319, -0.8984865, -0.05664062),
	float3(-0.2859453, 0.9563312, -0.06054682),
	float3(0.856679, -0.5118074, -0.06445316),
	float3(-0.9771845, -0.2010909, -0.06835936),
	float3(0.5844711, 0.8081901, -0.07226568),
	float3(0.1150158, -0.9904389, -0.07617185),
	float3(-0.7535132, 0.6525376, -0.08007817),
	float3(0.9960759, 0.02791709, -0.08398432),
	float3(-0.715478, -0.6930847, -0.0878906),
	float3(0.05928225, 0.9940115, -0.09179685),
	float3(0.627575, -0.7726517, -0.0957031),
	float3(-0.9842722, 0.1458976, -0.09960942),
	float3(0.82394, 0.5571422, -0.1035156),
	float3(-0.23125, -0.9669457, -0.1074219),
	float3(-0.482521, 0.8687804, -0.1113282),
	float3(0.9422566, -0.3144414, -0.1152344),
	float3(-0.9068316, -0.4043043, -0.1191406),
	float3(0.3952881, 0.9102784, -0.1230469),
	float3(0.3231123, -0.9378067, -0.1269531),
	float3(-0.8713316, 0.4729239, -0.1308594),
	float3(0.9614173, 0.2398229, -0.1347656),
	float3(-0.5467455, -0.8257357, -0.1386719),
	float3(-0.1546311, 0.9776302, -0.1425781),
	float3(0.7738625, -0.6161811, -0.1464844),
	float3(-0.986255, -0.06843847, -0.1503906),
	float3(0.6805203, 0.7162992, -0.1542968),
	float3(-0.01807581, -0.9872411, -0.1582032),
	float3(-0.6531952, 0.7396328, -0.1621094),
	float3(0.9805991, -0.1042314, -0.1660156),
	float3(-0.7928785, -0.5852095, -0.1699219),
	float3(0.1891164, 0.9664465, -0.1738282),
	float3(0.5128891, -0.8398543, -0.1777344),
	float3(-0.9448427, 0.2725418, -0.1816406),
	float3(0.880208, 0.4368139, -0.1855469),
	float3(-0.3536174, -0.9160034, -0.1894532),
	float3(-0.3578154, 0.9135537, -0.1933594),
	float3(0.8801764, -0.4317127, -0.1972656),
	float3(-0.9398438, -0.2760861, -0.2011719),
	float3(0.5060182, 0.8377879, -0.2050781),
	float3(0.1924911, -0.9587871, -0.2089844),
	float3(-0.7889634, 0.5763804, -0.2128906),
	float3(0.9702583, 0.107694, -0.2167969),
	float3(-0.6420447, -0.7342131, -0.2207031),
	float3(-0.02260348, 0.9741867, -0.2246094),
	float3(0.6739879, -0.7025104, -0.2285157),
	float3(-0.9705995, 0.06258374, -0.2324218),
	float3(0.7573205, 0.6087813, -0.2363281),
	float3(-0.1469609, -0.9595259, -0.2402344),
	float3(-0.5393216, 0.8059328, -0.2441407),
	float3(0.9410813, -0.229867, -0.2480469),
	float3(-0.8482679, -0.465791, -0.2519531),
	float3(0.3106547, 0.9154396, -0.2558593),
	float3(0.388969, -0.8838693, -0.2597657),
	float3(-0.8829268, 0.3884811, -0.2636719),
	float3(0.9124844, 0.3094741, -0.2675781),
	float3(-0.4631831, -0.8436573, -0.2714844),
	float3(-0.2279441, 0.9339173, -0.2753907),
	float3(0.7980453, -0.5339633, -0.2792969),
	float3(-0.9479952, -0.1452622, -0.2832031),
	float3(0.600281, 0.746479, -0.2871094),
	float3(0.0616271, -0.9547314, -0.2910156),
	float3(-0.6893923, 0.6616338, -0.2949219),
	float3(0.9540517, -0.02207006, -0.2988282),
	float3(-0.7174082, -0.6274372, -0.3027344),
	float3(0.1051685, 0.9459974, -0.3066406),
	float3(0.5607907, -0.7675119, -0.3105469),
	float3(-0.9306689, 0.1870152, -0.3144532),
	float3(0.8114106, 0.4901634, -0.3183593),
	float3(-0.2667484, -0.9082897, -0.3222656),
	float3(-0.4161341, 0.8487899, -0.3261718),
	float3(0.8789635, -0.344197, -0.3300782),
	float3(-0.8793066, -0.3395209, -0.3339844),
	float3(0.4185353, 0.8430055, -0.3378906),
	float3(0.2605231, -0.9029411, -0.3417968),
	float3(-0.800737, 0.4891928, -0.3457032),
	float3(0.9194447, 0.1799852, -0.3496094),
	float3(-0.5554479, -0.7526648, -0.3535156),
	float3(-0.09855374, 0.9287286, -0.3574219),
	float3(0.6989497, -0.6171802, -0.3613282),
	float3(-0.9307626, -0.01687901, -0.3652344),
	float3(0.6737339, 0.64017, -0.3691407),
	float3(-0.06416433, -0.9255912, -0.3730468),
	float3(-0.5768238, 0.7246935, -0.3769532),
	float3(0.9132895, -0.1443894, -0.3808594),
	float3(-0.7696905, -0.5094427, -0.3847656),
	float3(0.2229394, 0.8939978, -0.3886719),
	float3(0.4387856, -0.8083004, -0.3925782),
	float3(-0.8679161, 0.2992019, -0.3964843),
	float3(0.8404905, 0.365052, -0.4003907),
	float3(-0.3725867, -0.8352982, -0.4042969),
	float3(-0.2890359, 0.8659264, -0.4082031),
	float3(0.7965579, -0.4423363, -0.4121094),
	float3(-0.8844539, -0.2113583, -0.4160157),
	float3(0.5083189, 0.7518494, -0.4199219),
	float3(0.1326496, -0.8959764, -0.4238282),
	float3(-0.7016634, 0.5698349, -0.4277344),
	float3(0.900442, 0.05376453, -0.4316405),
	float3(-0.6264281, -0.6464416, -0.4355468),
	float3(0.02510356, 0.8979146, -0.4394532),
	float3(0.5868296, -0.6775423, -0.4433594),
	float3(-0.888438, 0.1031084, -0.4472656),
	float3(0.7231132, 0.5230212, -0.4511719),
	float3(-0.1796339, -0.8721442, -0.4550781),
	float3(-0.4557128, 0.7626659, -0.4589843),
	float3(0.8492824, -0.2538733, -0.4628907),
	float3(-0.7959347, -0.3854721, -0.4667968),
	float3(0.3256703, 0.8199863, -0.470703),
	float3(0.3128871, -0.8227075, -0.4746093),
	float3(-0.7845902, 0.39426, -0.4785157),
	float3(0.8427692, 0.2387663, -0.4824218),
	float3(-0.4591211, -0.7434331, -0.4863281),
	float3(-0.1633136, 0.8561536, -0.4902343),
	float3(0.6968984, -0.5197669, -0.4941407),
	float3(-0.8627397, -0.0873468, -0.498047),
	float3(0.5755922, 0.6455516, -0.5019531),
	float3(0.01148205, -0.8625395, -0.5058595),
	float3(-0.5895862, 0.6265199, -0.5097656),
	float3(0.855621, -0.06367048, -0.5136718),
	float3(-0.6720195, -0.5296251, -0.5175781),
	float3(0.137306, 0.8421408, -0.5214843),
	float3(0.4661926, -0.7117789, -0.5253907),
	float3(-0.8222263, 0.2092575, -0.5292969),
	float3(0.7455361, 0.3998379, -0.5332032),
	float3(-0.2787536, -0.7961218, -0.5371094),
	float3(-0.3313182, 0.7730009, -0.5410156),
	float3(0.7641055, -0.3452577, -0.5449219),
	float3(-0.7941965, -0.2608443, -0.5488281),
	float3(0.4082627, 0.7265028, -0.5527344),
	float3(0.1891907, -0.8089241, -0.5566406),
	float3(-0.6837967, 0.4671288, -0.5605468),
	float3(0.8171379, 0.1169542, -0.5644532),
	float3(-0.5217665, -0.6361818, -0.5683594),
	float3(-0.04493096, 0.8188365, -0.5722657),
	float3(0.5842038, -0.5716046, -0.5761719),
	float3(-0.8141235, 0.02668987, -0.5800782),
	float3(0.6161647, 0.5284917, -0.5839843),
	float3(-0.09732554, -0.8030643, -0.5878907),
	float3(-0.4691004, 0.6555313, -0.5917969),
	float3(0.7859008, -0.1658244, -0.5957032),
	float3(-0.6889653, -0.4071798, -0.5996094),
	float3(0.2320456, 0.7628393, -0.6035156),
	float3(0.3426238, -0.7166922, -0.6074218),
	float3(-0.7340029, 0.2958341, -0.6113281),
	float3(0.738197, 0.27668, -0.6152343),
	float3(-0.3559721, -0.6999635, -0.6191406),
	float3(-0.2095794, 0.7535841, -0.6230469),
	float3(0.6607612, -0.4127038, -0.6269531),
	float3(-0.7628816, -0.1415205, -0.6308594),
	float3(0.4649487, 0.6171671, -0.6347656),
	float3(0.0738165, -0.7659304, -0.6386719),
	float3(-0.5694362, 0.5126751, -0.6425781),
	float3(0.7628981, 0.006663158, -0.6464844),
	float3(-0.5558056, -0.5177569, -0.6503906),
	float3(0.05975525, 0.7538733, -0.6542969),
	float3(0.4631399, -0.5935234, -0.6582031),
	float3(-0.7390505, 0.1241587, -0.6621094),
	float3(0.6258706, 0.4058438, -0.6660157),
	float3(-0.1867548, -0.7185591, -0.6699219),
	float3(-0.3460762, 0.6528299, -0.6738282),
	float3(0.6928157, -0.2463384, -0.6777343),
	float3(-0.6738984, -0.2850034, -0.6816406),
	float3(0.3028087, 0.6620668, -0.6855469),
	float3(0.2225304, -0.6893001, -0.6894531),
	float3(-0.6264869, 0.3560434, -0.6933594),
	float3(0.6987563, 0.1598754, -0.6972657),
	float3(-0.4050198, -0.5867854, -0.7011718),
	float3(-0.09725726, 0.7024286, -0.7050781),
	float3(0.5430138, -0.4499747, -0.7089844),
	float3(-0.7004074, -0.03487483, -0.7128907),
	float3(0.4900466, 0.496041, -0.7167968),
	float3(-0.0260552, -0.6927541, -0.7207031),
	float3(-0.4461434, 0.5252593, -0.7246094),
	float3(0.679648, -0.08569541, -0.7285156),
	float3(-0.5555899, -0.3935453, -0.7324219),
	float3(0.142882, 0.6613666, -0.7363281),
	float3(0.3392887, -0.5804622, -0.7402343),
	float3(-0.6381641, 0.1974876, -0.7441406),
	float3(0.600117, 0.2833469, -0.7480469),
	float3(-0.2493746, -0.6102285, -0.7519531),
	float3(-0.2268291, 0.6141866, -0.7558594),
	float3(0.5781286, -0.2975289, -0.7597657),
	float3(-0.6228251, -0.1699831, -0.7636718),
	float3(0.3421619, 0.5419862, -0.7675781),
	float3(0.1130315, -0.6261275, -0.7714844),
	float3(-0.5025331, 0.3824001, -0.7753907),
	float3(0.6240475, 0.05710715, -0.7792968),
	float3(-0.4182444, -0.4600701, -0.7832032),
	float3(-0.002111975, 0.6168098, -0.7871094),
	float3(0.4148478, -0.4496615, -0.7910157),
	float3(-0.6045767, 0.05085577, -0.7949218),
	float3(0.4760354, 0.3677824, -0.7988281),
	float3(-0.101633, -0.5876123, -0.8027344),
	float3(-0.3189318, 0.4976078, -0.8066406),
	float3(0.566125, -0.1500545, -0.8105469),
	float3(-0.5139545, -0.2692896, -0.8144531),
	float3(0.1951437, 0.5405617, -0.8183593),
	float3(0.219145, -0.5252188, -0.8222656),
	float3(-0.5111191, 0.2370596, -0.8261719),
	float3(0.531498, 0.168761, -0.8300781),
	float3(-0.2749475, -0.4784077, -0.8339844),
	float3(-0.1191749, 0.5326694, -0.8378906),
	float3(0.4427617, -0.308772, -0.8417968),
	float3(-0.5289919, -0.07038289, -0.8457031),
	float3(0.3384744, 0.4044738, -0.8496094),
	float3(0.02340348, -0.5205414, -0.8535156),
	float3(-0.3643444, 0.3634293, -0.8574219),
	float3(0.5075923, -0.02154235, -0.8613281),
	float3(-0.3838469, -0.3225382, -0.8652344),
	float3(0.0642339, 0.490376, -0.8691406),
	float3(0.2799416, -0.3992767, -0.8730469),
	float3(-0.4692439, 0.1037462, -0.8769532),
	float3(0.4098307, 0.2369084, -0.8808594),
	float3(-0.1399192, -0.4445362, -0.8847656),
	float3(-0.193776, 0.4155877, -0.8886719),
	float3(0.4165585, -0.1725783, -0.8925781),
	float3(-0.4163712, -0.1514953, -0.8964844),
	float3(0.2009559, 0.3858932, -0.9003906),
	float3(0.1104138, -0.4123783, -0.9042969),
	float3(-0.3528236, 0.2251279, -0.9082031),
	float3(0.4037724, 0.07088242, -0.9121094),
	float3(-0.2444521, -0.3180542, -0.9160157),
	float3(-0.03384922, 0.3906379, -0.9199219),
	float3(0.2820101, -0.2588665, -0.9238281),
	float3(-0.3732407, 0.0005215931, -0.9277344),
	float3(0.268265, 0.2451116, -0.9316406),
	float3(-0.03130275, -0.3518128, -0.9355469),
	float3(-0.2081969, 0.2721799, -0.9394531),
	float3(0.3266425, -0.05811922, -0.9433594),
	float3(-0.270622, -0.1716147, -0.9472656),
	float3(0.08051931, 0.2979743, -0.9511719),
	float3(0.1362733, -0.263164, -0.9550781),
	float3(-0.2661505, 0.09753376, -0.9589844),
	float3(0.249578, 0.1027252, -0.9628906),
	float3(-0.1086382, -0.231304, -0.9667969),
	float3(-0.0716116, 0.2293627, -0.9707031),
	float3(0.1935944, -0.1125066, -0.9746094),
	float3(-0.2014133, -0.04404388, -0.9785156),
	float3(0.107518, 0.1526013, -0.9824219),
	float3(0.02094652, -0.1634567, -0.9863281),
	float3(-0.1064832, 0.08998444, -0.9902344),
	float3(0.1080075, 0.004334306, -0.9941406),
	float3(-0.04432973, -0.04401487, -0.9980469),
};
#endif



//sampler2D OpacityTF;

//static const float START_RADIUS = 2; // mm
//static const int RAY_STEP_COUNT = 20;
static const float RADIUS_STEP_SIZE = 1; // mm per step

static int3 dimensions;
static int3 ida;
int startZ;
RWStructuredBuffer<int> timeoutBuffer;

float getOpacity(float3 positionNc)
{
    return Opacities.SampleLevel(samplerOpacities, positionNc, 0).r;
}

float ambientFactorOfRay(float3 rayStart, float3 rayDirection, int samplesCount)
{
    float accumulatedAmbient = 0;
    float currentTransparency = 1;

    for (int i = 0; i < samplesCount; i++)
    {
        float3 currentPosition = rayStart + rayDirection * float(i * RADIUS_STEP_SIZE);
        float opacity = getOpacity(currentPosition);
        //float opacity = getOpacityTF(intensity);
        float transparency = 1. - opacity;
        currentTransparency *= transparency; //transparencies[i];
        accumulatedAmbient += currentTransparency;
    }
    
    // Adding one to accumulated opacity because it is indicated so in the formula
    return (accumulatedAmbient + 1.0) / float(samplesCount + 1.0); 

    /////////////////
    //float3 currentPosition = rayStart + rayDirection * float(samplesCount);
    //float intensity = getIntensity(currentPosition);
    //float opacity = getOpacityTF(intensity);
    //float transparency = 1. - opacity;
    //return transparency;

    //float currentTransparency = 1;
    //for (int i = 0; i < samplesCount; i++)
    //{
    //    float3 currentPosition = rayStart + rayDirection * float(i);
    //    float intensity = getIntensity(currentPosition);
    //    float opacity = getOpacityTF(intensity);
    //    float transparency = 1. - opacity;
    //    currentTransparency *= transparency; //transparencies[i];
    //}    
    //return currentTransparency;
}

void setResult(float result)
{
    Result[ida] = result;
}

[numthreads(4, 4, 4)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    ida = int3(id.x, id.y, id.z + startZ);
    dimensions = int3(Dimensions.x, Dimensions.y, Dimensions.z);

    if (ida.x >= dimensions.x || ida.y >= dimensions.y || ida.z >= dimensions.z)
    {
        return;
    }
    
#if !FULL_RECALCULATION
    // Mask calculations
    float maskValue = Mask[ida];
    
    if (maskValue == 0.0)
    {
        setResult(1); // Voxel is fully clipped
        return;
    }
    else if (maskValue == 1.0)
    {
        setResult(LaoPrecalculated[ida]); // Voxel value can be taken from precalculated LAO volume
        return;
    }
 #endif

    // Optimization consisting of not calculating LAO for transparent voxels
    if (Opacities[ida + int3(1, 1, 1)] == 0
        && Opacities[ida] == 0
        && Opacities[ida + int3(2, 2, 2)] == 0
        && Opacities[ida + int3(0, 2, 2)] == 0
        && Opacities[ida + int3(2, 0, 2)] == 0
        && Opacities[ida + int3(0, 0, 2)] == 0
        && Opacities[ida + int3(2, 2, 0)] == 0
        && Opacities[ida + int3(0, 2, 0)] == 0
        && Opacities[ida + int3(2, 0, 0)] == 0)
    {
        setResult(1);
        return;
    }
    
    //boundaryMin = float3(0.5, 0.5, 0.5) / float3(dimensions);
    //boundaryMax = float3(1, 1, 1) - boundaryMin;
    float3 voxelPositionNc = float3(ida + float3(1.5, 1.5, 1.5)) / float3(dimensions + int3(2, 2, 2)); 

    /*float intensity = getIntensity(voxelPositionNc);
    
    float opacity = getOpacityTF(intensity);
    
    float ambientFactor = ambientFactorOfRay(voxelPositionNc, StepForMm.xyz, 10);*/
    
    float totalAmbient = 0;
    
    for (int i = 0; i < LAO_RAYS_COUNT; i++)
    {
        /*float z = SphereZ[i];
        float longitude = SphereLongitude[i];
        
        float2 rotation2d = float2(cos(longitude), sin(longitude));
        float norm2d = sqrt(1. - z * z);
        
        float2 rotation = rotation2d * norm2d;*/
        
        float3 spherePoint = SphereVectors[i]; //float3(rotation.x, rotation.y, z);
        
        float3 rayDirection = spherePoint * StepForMm.xyz;
        float3 rayStart = voxelPositionNc + spherePoint * DistanceToVoxel;
        
        totalAmbient += ambientFactorOfRay(rayStart, rayDirection, RayStepCount);
    }
    
    setResult(totalAmbient / float(LAO_RAYS_COUNT));
	
    timeoutBuffer[0] = 12;

    //setResult(Opacities[ida]); // TODO replace
}
